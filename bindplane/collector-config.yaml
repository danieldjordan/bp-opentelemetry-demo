receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - "http://*"
            - "https://*"
  
  prometheus:
    config:
      scrape_configs:
        - job_name: '${FEATURE_FLAG_SERVICE_ADDR}'
          scrape_interval: 2s
          static_configs:
            - targets: ['${FEATURE_FLAG_SERVICE_ADDR}']
  
  zipkin:
    endpoint: 0.0.0.0:9411

  # BindPlane specific receiver for agent management (if using OpAMP)
  opamp:
    endpoint: ws://bindplane:3001/v1/opamp
    labels:
      service.name: demo-collector
      service.version: latest
    # secret_key: ${OPAMP_SECRET_KEY}

processors:
  batch:
    timeout: 5s
    send_batch_size: 1024
  
  memory_limiter:
    check_interval: 1s
    limit_mib: 384
    spike_limit_mib: 128
  
  resource:
    attributes:
      - key: deployment.environment
        value: demo
        action: upsert

exporters:
  # Export to the demo's Jaeger instance
  otlp:
    endpoint: jaeger:4317
    tls:
      insecure: true
  
  # Export to the demo's Prometheus instance
  prometheus:
    endpoint: 0.0.0.0:4319
    const_labels:
      collector: bindplane
  
  # BindPlane metrics export (internal collector metrics)
  prometheus/self:
    endpoint: 0.0.0.0:8888
    send_timestamps: true
    metric_expiration: 5m
  
  # Export to Kafka (for async processing)
  kafka:
    brokers:
      - ${KAFKA_SERVICE_ADDR}
    topic: otlp_spans
    encoding: otlp_proto

extensions:
  health_check:
    endpoint: :13133
    check_collector_pipeline:
      enabled: true
      interval: 5s
      exporter_failure_threshold: 5
  
  zpages:
    endpoint: :55679
  
  pprof:
    endpoint: :1999

service:
  extensions: [health_check, zpages, pprof]
  pipelines:
    traces:
      receivers: [otlp, zipkin]
      processors: [memory_limiter, batch, resource]
      exporters: [otlp, kafka]
    
    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, batch]
      exporters: [prometheus]
    
    metrics/self:
      receivers: []
      processors: []
      exporters: [prometheus/self]